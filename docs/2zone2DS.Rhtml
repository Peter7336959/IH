<!DOCTYPE html>
<html lang="zh-TW">
<head>
  <meta charset="UTF-8">
  <title>二暴露區模式暴露風險評估</title>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <style>
    body {
      font-family: "Microsoft JhengHei", Arial, sans-serif;
      margin: 20px;
      line-height: 1.6;
    }
    .container {
      display: flex;
      flex-wrap: wrap;
      gap: 20px;
    }
    .input-section {
      flex: 1;
      min-width: 300px;
      background-color: #f5f5f5;
      padding: 15px;
      border-radius: 5px;
    }
    .result-section {
      flex: 2;
      min-width: 500px;
    }
    .input-group {
      margin-bottom: 10px;
    }
    label {
      display: inline-block;
      width: 200px;
    }
    input, select {
      width: 150px;
      padding: 5px;
    }
    button {
      padding: 8px 15px;
      background-color: #4CAF50;
      color: white;
      border: none;
      border-radius: 4px;
      cursor: pointer;
      margin: 10px 5px;
    }
    button.print {
      background-color: #008CBA;
    }
    table {
      border-collapse: collapse;
      width: 100%;
      margin: 10px 0;
    }
    table, th, td {
      border: 1px solid #ddd;
    }
    th, td {
      padding: 8px;
      text-align: left;
    }
    th {
      background-color: #f2f2f2;
    }
    .risk-level-1 { background-color: #90EE90; }
    .risk-level-2 { background-color: #FFFFE0; }
    .risk-level-3 { background-color: #FFD580; }
    .risk-level-4 { background-color: #FF6347; }
    .chart-container {
      width: 100%;
      height: 400px;
      margin: 20px 0;
    }
    .formula {
      background-color: #f9f9f9;
      padding: 10px;
      margin: 10px 0;
      border-left: 4px solid #4CAF50;
    }
    .collapsible {
      background-color: #eee;
      color: #444;
      cursor: pointer;
      padding: 10px;
      width: 100%;
      border: none;
      text-align: left;
      outline: none;
      font-size: 15px;
      margin-top: 10px;
    }
    .active, .collapsible:hover {
      background-color: #ccc;
    }
    .content {
      padding: 0 10px;
      display: none;
      overflow: hidden;
      background-color: #f9f9f9;
    }
    .warning {
      color: red;
      font-weight: bold;
    }
  </style>
</head>
<body>

<h1>二暴露區模式暴露風險評估</h1>

<div>
  <img src="images/2zone.png" alt="暴露空間模式示意圖" style="max-width: 30%;">
</div>

<div class="container">
  <div class="input-section">
    <h2>輸入參數</h2>
    
    <div class="input-group">
      <label for="chemName">化學物質名稱:</label>
      <input type="text" id="chemName" value="甲苯">
    </div>
    
    <div class="input-group">
      <label for="mw">分子量 (g/mol):</label>
      <input type="number" id="mw" value="92.14" step="0.01">
    </div>
    
    <div class="input-group">
      <label for="G">污染物排放率 (mg/min):</label>
      <input type="number" id="G" value="100" step="0.1">
    </div>
    
    <div class="input-group">
      <label for="totalVolume">室內總體積 (m³):</label>
      <input type="number" id="totalVolume" value="50" step="0.1" onchange="calculateVF()">
    </div>
    
    <div class="input-group">
      <label for="r">近場呼吸域半徑 (m):</label>
      <input type="number" id="r" value="0.5" step="0.01" onchange="calculateVNandFSA()">
    </div>
    
    <div class="input-group">
      <label for="VN">近場體積 VN (m³):</label>
      <input type="number" id="VN" value="0.26" step="0.01" readonly>
    </div>
    
    <div class="input-group">
      <label for="VF">遠場體積 VF (m³):</label>
      <input type="number" id="VF" value="49.74" step="0.01" readonly>
    </div>
    
    <div class="input-group">
      <label for="Q">通風率 (m³/min):</label>
      <input type="number" id="Q" value="5" step="0.1">
    </div>
    
    <div class="input-group">
      <label for="S">近場空氣流速 (m/min):</label>
      <input type="number" id="S" value="10" step="0.1" onchange="calculateBeta()">
    </div>
    
    <div class="input-group">
      <label for="FSA">FSA (m²):</label>
      <input type="number" id="FSA" value="1.57" step="0.01" readonly>
    </div>
    
    <div class="input-group">
      <label for="beta">β 混合係數 (m³/min):</label>
      <input type="number" id="beta" value="7.85" step="0.01" readonly>
    </div>
    
    <div class="input-group">
      <label for="exposureTime">暴露時間 (分鐘):</label>
      <input type="number" id="exposureTime" value="480" min="1" max="1440">
    </div>
    
    <button type="button" class="collapsible">暴露限值設定</button>
    <div class="content">
      <div class="input-group">
        <label for="TWA">TWA (8小時):</label>
        <input type="number" id="TWA" value="100" step="0.1">
        <select id="TWA_unit">
          <option value="ppm">ppm</option>
          <option value="mg_m3">mg/m³</option>
        </select>
      </div>
      
      <div class="input-group">
        <label for="STEL">STEL (15分鐘):</label>
        <input type="number" id="STEL" value="150" step="0.1">
        <select id="STEL_unit">
          <option value="ppm">ppm</option>
          <option value="mg_m3">mg/m³</option>
        </select>
      </div>
      
      <div class="input-group">
        <label for="IDLH">IDLH:</label>
        <input type="number" id="IDLH" value="500" step="0.1">
        <select id="IDLH_unit">
          <option value="ppm">ppm</option>
          <option value="mg_m3">mg/m³</option>
        </select>
      </div>
      
      <div class="input-group">
        <label for="OEL">OEL:</label>
        <input type="number" id="OEL" value="80" step="0.1">
        <select id="OEL_unit">
          <option value="ppm">ppm</option>
          <option value="mg_m3">mg/m³</option>
        </select>
      </div>
    </div>
    
    <h3>計算功能選擇</h3>
    <div class="input-group">
      <select id="calculationType">
        <option value="timeConcentration">功能1：時間濃度解</option>
        <option value="steadyState">功能2：穩態濃度</option>
        <option value="decay">功能3：濃度衰減</option>
      </select>
    </div>
    
    <div id="decayTimeInput" style="display:none;">
      <div class="input-group">
        <label for="decayStartTime">污染源停止時間 (分鐘):</label>
        <input type="number" id="decayStartTime" value="240" min="1">
      </div>
    </div>
    
    <button onclick="calculate()">計算</button>
    <button onclick="window.print()" class="print">列印</button>
  </div>
  
  <div class="result-section">
    <h2>計算結果</h2>
    
    <div class="formula">
      <div id="formulaDesc">
        公式7-1 (近場): C<sub>n</sub>(t) = G/(β+Q) + G[βQ + λ₂V<sub>N</sub>(β+Q)]/(βQV<sub>N</sub>(λ₁-λ₂)) e<sup>λ₁t</sup> - G[βQ + λ₁V<sub>N</sub>(β+Q)]/(βQV<sub>N</sub>(λ₁-λ₂)) e<sup>λ₂t</sup><br>
        公式7-2 (遠場): C<sub>f</sub>(t) = G/Q + G(λ₁V<sub>N</sub>+β)/β × [βQ + λ₂V<sub>N</sub>(β+Q)]/(βQV<sub>N</sub>(λ₁-λ₂)) e<sup>λ₁t</sup> - G(λ₂V<sub>N</sub>+β)/β × [βQ + λ₁V<sub>N</sub>(β+Q)]/(βQV<sub>N</sub>(λ₁-λ₂)) e<sup>λ₂t</sup>
      </div>
    </div>
    
    <div id="lambdaResults">
      <h3>模型參數</h3>
      <table>
        <tr>
          <th>參數</th>
          <th>值</th>
          <th>單位</th>
          <th>說明</th>
        </tr>
        <tr>
          <td>λ₁</td>
          <td id="lambda1">-</td>
          <td>min⁻¹</td>
          <td>≈ Q/V<sub>F</sub> = <span id="lambda1_approx">-</span></td>
        </tr>
        <tr>
          <td>λ₂</td>
          <td id="lambda2">-</td>
          <td>min⁻¹</td>
          <td>≈ β/V<sub>N</sub> = <span id="lambda2_approx">-</span></td>
        </tr>
        <tr>
          <td>FSA</td>
          <td id="FSA_result">-</td>
          <td>m²</td>
          <td>自由表面積 (2πr²)</td>
        </tr>
        <tr>
          <td>β</td>
          <td id="beta_result">-</td>
          <td>m³/min</td>
          <td>區域間空氣交換速率 (0.5×FSA×S)</td>
        </tr>
      </table>
    </div>
    
    <div id="concentrationResults">
      <h3>濃度計算結果</h3>
      <table>
        <tr>
          <th>區域</th>
          <th>濃度值</th>
          <th>單位</th>
        </tr>
        <tr>
          <td>近場濃度</td>
          <td id="nearFieldConc">-</td>
          <td>mg/m³</td>
        </tr>
        <tr>
          <td>遠場濃度</td>
          <td id="farFieldConc">-</td>
          <td>mg/m³</td>
        </tr>
        <tr>
          <td>近場濃度</td>
          <td id="nearFieldConcPPM">-</td>
          <td>ppm</td>
        </tr>
        <tr>
          <td>遠場濃度</td>
          <td id="farFieldConcPPM">-</td>
          <td>ppm</td>
        </tr>
      </table>
    </div>
    
    <div id="exposureResults">
      <h3>暴露評估結果</h3>
      <table>
        <tr>
          <th>指標</th>
          <th>計算值</th>
          <th>限值</th>
          <th>單位</th>
          <th>比較結果</th>
        </tr>
        <tr>
          <td>TWA (8小時)</td>
          <td id="TWA_value">-</td>
          <td id="TWA_limit">-</td>
          <td id="TWA_unit_display">-</td>
          <td id="TWA_result">-</td>
        </tr>
        <tr>
          <td>STEL (15分鐘)</td>
          <td id="STEL_value">-</td>
          <td id="STEL_limit">-</td>
          <td id="STEL_unit_display">-</td>
          <td id="STEL_result">-</td>
        </tr>
        <tr>
          <td>IDLH</td>
          <td id="IDLH_value">-</td>
          <td id="IDLH_limit">-</td>
          <td id="IDLH_unit_display">-</td>
          <td id="IDLH_result">-</td>
        </tr>
        <tr>
          <td>OEL</td>
          <td id="OEL_value">-</td>
          <td id="OEL_limit">-</td>
          <td id="OEL_unit_display">-</td>
          <td id="OEL_result">-</td>
        </tr>
      </table>
    </div>
    
    <div id="riskAssessment">
      <h3>風險分級</h3>
      <table>
        <tr>
          <th>風險類型</th>
          <th>風險等級</th>
          <th>說明</th>
          <th>建議控制措施</th>
        </tr>
        <tr id="shortTermRisk">
          <td>短期暴露風險</td>
          <td>-</td>
          <td>-</td>
          <td>-</td>
        </tr>
        <tr id="longTermRisk">
          <td>長期暴露風險</td>
          <td>-</td>
          <td>-</td>
          <td>-</td>
        </tr>
      </table>
    </div>
    
    <div class="chart-container">
      <canvas id="concentrationChart"></canvas>
    </div>
  </div>
</div>

<script>
  // 全局變數用於存儲圖表實例
  let concentrationChart = null;
  
  // 摺疊面板功能
  var coll = document.getElementsByClassName("collapsible");
  for (var i = 0; i < coll.length; i++) {
    coll[i].addEventListener("click", function() {
      this.classList.toggle("active");
      var content = this.nextElementSibling;
      if (content.style.display === "block") {
        content.style.display = "none";
      } else {
        content.style.display = "block";
      }
    });
  }
  
  // 顯示/隱藏衰減時間輸入
  document.getElementById('calculationType').addEventListener('change', function() {
    if (this.value === 'decay') {
      document.getElementById('decayTimeInput').style.display = 'block';
    } else {
      document.getElementById('decayTimeInput').style.display = 'none';
    }
  });
  
  // 計算近場體積和FSA
  function calculateVNandFSA() {
    const r = parseFloat(document.getElementById('r').value);
    const VN = (2/3) * Math.PI * Math.pow(r, 3); // 半球體積
    const FSA = 2 * Math.PI * Math.pow(r, 2); // 半球形自由表面積
    
    document.getElementById('VN').value = VN.toFixed(2);
    document.getElementById('FSA').value = FSA.toFixed(2);
    
    calculateVF();
    calculateBeta();
  }
  
  // 計算遠場體積
  function calculateVF() {
    const totalVolume = parseFloat(document.getElementById('totalVolume').value);
    const VN = parseFloat(document.getElementById('VN').value);
    const VF = totalVolume - VN;
    
    document.getElementById('VF').value = VF > 0 ? VF.toFixed(2) : 0;
  }
  
  // 計算β
  function calculateBeta() {
    const FSA = parseFloat(document.getElementById('FSA').value);
    const S = parseFloat(document.getElementById('S').value);
    const beta = 0.5 * FSA * S;
    document.getElementById('beta').value = beta.toFixed(2);
  }
  
  // 單位轉換函數
  function mgm3_to_ppm(mgm3, mw) {
    return (mgm3 * 24.45) / mw;
  }
  
  function ppm_to_mgm3(ppm, mw) {
    return (ppm * mw) / 24.45;
  }
  
  // 計算λ₁和λ₂
  function calculateLambdas(Q, VF, beta, VN) {
    const A = (beta/VN + Q/VF + Q/VN);
    const B = (Q * beta) / (VF * VN);
    
    const discriminant = Math.pow(A, 2) - 4 * B;
    
    // 確保平方根內的值為正
    if (discriminant < 0) {
      throw new Error("計算錯誤：判別式為負值，請檢查輸入參數");
    }
    
    const lambda1 = (-A + Math.sqrt(discriminant)) / 2;
    const lambda2 = (-A - Math.sqrt(discriminant)) / 2;
    
    return { lambda1, lambda2 };
  }
  
  // 計算時間濃度解
  function calculateTimeConcentration(G, beta, Q, VN, VF, t, lambda1, lambda2) {
    // 公式7-1: 近場濃度
    const term1 = G / (beta + Q);
    const term2_numerator = G * (beta * Q + lambda2 * VN * (beta + Q));
    const term2_denominator = beta * Q * VN * (lambda1 - lambda2);
    const term2 = (term2_numerator / term2_denominator) * Math.exp(lambda1 * t);
    
    const term3_numerator = G * (beta * Q + lambda1 * VN * (beta + Q));
    const term3_denominator = beta * Q * VN * (lambda1 - lambda2);
    const term3 = (term3_numerator / term3_denominator) * Math.exp(lambda2 * t);
    
    let Cn = term1 + term2 - term3;
    
    // 確保濃度不為負值
    Cn = Math.max(0, Cn);
    
    // 公式7-2: 遠場濃度
    const term1_f = G / Q;
    const term2_f_numerator1 = G * (lambda1 * VN + beta) / beta;
    const term2_f_numerator2 = beta * Q + lambda2 * VN * (beta + Q);
    const term2_f_denominator = beta * Q * VN * (lambda1 - lambda2);
    const term2_f = (term2_f_numerator1 * term2_f_numerator2 / term2_f_denominator) * Math.exp(lambda1 * t);
    
    const term3_f_numerator1 = G * (lambda2 * VN + beta) / beta;
    const term3_f_numerator2 = beta * Q + lambda1 * VN * (beta + Q);
    const term3_f_denominator = beta * Q * VN * (lambda1 - lambda2);
    const term3_f = (term3_f_numerator1 * term3_f_numerator2 / term3_f_denominator) * Math.exp(lambda2 * t);
    
    let Cf = term1_f + term2_f - term3_f;
    
    // 確保濃度不為負值
    Cf = Math.max(0, Cf);
    
    return { Cn, Cf };
  }
  
  // 計算穩態濃度
  function calculateSteadyStateConcentration(G, beta, Q) {
    const Cn = G / (beta + Q);
    const Cf = G / Q;
    
    return { Cn, Cf };
  }
  
  // 計算濃度衰減
  function calculateDecayConcentration(G, beta, Q, VN, VF, t, lambda1, lambda2, decayStartTime) {
    // 先計算停止時的濃度
    const { Cn: Cn0, Cf: Cf0 } = calculateTimeConcentration(G, beta, Q, VN, VF, decayStartTime, lambda1, lambda2);
    
    // 公式7-5: 近場濃度衰減
    const term1_n_numerator = beta * (Cf0 - Cn0) - lambda2 * VN * Cn0;
    const term1_n_denominator = VN * (lambda1 - lambda2);
    const term1_n = (term1_n_numerator / term1_n_denominator) * Math.exp(lambda1 * (t - decayStartTime));
    
    const term2_n_numerator = beta * (Cn0 - Cf0) + lambda1 * VN * Cn0;
    const term2_n_denominator = VN * (lambda1 - lambda2);
    const term2_n = (term2_n_numerator / term2_n_denominator) * Math.exp(lambda2 * (t - decayStartTime));
    
    let Cn = term1_n + term2_n;
    
    // 確保濃度不為負值
    Cn = Math.max(0, Cn);
    
    // 公式7-6: 遠場濃度衰減
    const term1_f_numerator1 = (lambda1 * VN + beta);
    const term1_f_numerator2 = beta * (Cf0 - Cn0) - lambda2 * VN * Cn0;
    const term1_f_denominator = beta * VN * (lambda1 - lambda2);
    const term1_f = (term1_f_numerator1 * term1_f_numerator2 / term1_f_denominator) * Math.exp(lambda1 * (t - decayStartTime));
    
    const term2_f_numerator1 = (lambda2 * VN + beta);
    const term2_f_numerator2 = beta * (Cn0 - Cf0) + lambda1 * VN * Cn0;
    const term2_f_denominator = beta * VN * (lambda1 - lambda2);
    const term2_f = (term2_f_numerator1 * term2_f_numerator2 / term2_f_denominator) * Math.exp(lambda2 * (t - decayStartTime));
    
    let Cf = term1_f + term2_f;
    
    // 確保濃度不為負值
    Cf = Math.max(0, Cf);
    
    return { Cn, Cf };
  }
  
  // 計算TWA和STEL
  function calculateExposureMetrics(concentrations, exposureTime) {
    // 計算TWA (8小時加權平均)
    let TWA = 0;
    const twaPeriod = Math.min(480, concentrations.length);
    for (let i = 0; i < twaPeriod; i++) {
      TWA += concentrations[i];
    }
    TWA = TWA / twaPeriod;
    
    // 計算STEL (15分鐘短期暴露限值)
    let STEL = 0;
    const stelPeriod = 15;
    const stelValues = [];
    
    for (let i = 0; i <= concentrations.length - stelPeriod; i++) {
      let stelValue = 0;
      for (let j = 0; j < stelPeriod; j++) {
        stelValue += concentrations[i + j];
      }
      stelValue = stelValue / stelPeriod;
      stelValues.push(stelValue);
      if (stelValue > STEL) {
        STEL = stelValue;
      }
    }
    
    // 如果濃度數組長度小於15分鐘，計算平均值
    if (concentrations.length < stelPeriod && concentrations.length > 0) {
      STEL = concentrations.reduce((a, b) => a + b, 0) / concentrations.length;
    }
    
    return { TWA, STEL };
  }
  
  // 主計算函數
  function calculate() {
    try {
      // 獲取輸入值
      const mw = parseFloat(document.getElementById('mw').value);
      const G = parseFloat(document.getElementById('G').value);
      const VF = parseFloat(document.getElementById('VF').value);
      const VN = parseFloat(document.getElementById('VN').value);
      const Q = parseFloat(document.getElementById('Q').value);
      const beta = parseFloat(document.getElementById('beta').value);
      const exposureTime = parseInt(document.getElementById('exposureTime').value);
      const calculationType = document.getElementById('calculationType').value;
      const decayStartTime = parseFloat(document.getElementById('decayStartTime').value);
      
      // 獲取暴露限值
      const TWA_limit = parseFloat(document.getElementById('TWA').value);
      const STEL_limit = parseFloat(document.getElementById('STEL').value);
      const IDLH_limit = parseFloat(document.getElementById('IDLH').value);
      const OEL_limit = parseFloat(document.getElementById('OEL').value);
      
      // 獲取單位
      const TWA_unit = document.getElementById('TWA_unit').value;
      const STEL_unit = document.getElementById('STEL_unit').value;
      const IDLH_unit = document.getElementById('IDLH_unit').value;
      const OEL_unit = document.getElementById('OEL_unit').value;
      
      // 計算λ₁和λ₂
      const { lambda1, lambda2 } = calculateLambdas(Q, VF, beta, VN);
      document.getElementById('lambda1').textContent = lambda1.toFixed(4);
      document.getElementById('lambda2').textContent = lambda2.toFixed(4);
      
      // 顯示近似值
      document.getElementById('lambda1_approx').textContent = (Q/VF).toFixed(4);
      document.getElementById('lambda2_approx').textContent = (beta/VN).toFixed(4);
      
      // 顯示FSA和β
      const FSA = parseFloat(document.getElementById('FSA').value);
      document.getElementById('FSA_result').textContent = FSA.toFixed(2);
      document.getElementById('beta_result').textContent = beta.toFixed(2);
      
      // 根據選擇的計算類型進行計算
      let Cn, Cf;
      let nearFieldConcentrations = [];
      let farFieldConcentrations = [];
      
      // 更新公式描述
      const formulaDesc = document.getElementById('formulaDesc');
      if (calculationType === 'timeConcentration') {
        formulaDesc.innerHTML = "公式7-1 (近場): C<sub>n</sub>(t) = G/(β+Q) + G[βQ + λ₂V<sub>N</sub>(β+Q)]/(βQV<sub>N</sub>(λ₁-λ₂)) e<sup>λ₁t</sup> - G[βQ + λ₁V<sub>N</sub>(β+Q)]/(βQV<sub>N</sub>(λ₁-λ₂)) e<sup>λ₂t</sup><br>" +
                               "公式7-2 (遠場): C<sub>f</sub>(t) = G/Q + G(λ₁V<sub>N</sub>+β)/β × [βQ + λ₂V<sub>N</sub>(β+Q)]/(βQV<sub>N</sub>(λ₁-λ₂)) e<sup>λ₁t</sup> - G(λ₂V<sub>N</sub>+β)/β × [βQ + λ₁V<sub>N</sub>(β+Q)]/(βQV<sub>N</sub>(λ₁-λ₂)) e<sup>λ₂t</sup>";
        
        // 計算每分鐘濃度
        for (let t = 1; t <= exposureTime; t++) {
          const result = calculateTimeConcentration(G, beta, Q, VN, VF, t, lambda1, lambda2);
          nearFieldConcentrations.push(result.Cn);
          farFieldConcentrations.push(result.Cf);
        }
        
        Cn = nearFieldConcentrations[exposureTime - 1];
        Cf = farFieldConcentrations[exposureTime - 1];
      } 
      else if (calculationType === 'steadyState') {
        formulaDesc.innerHTML = "公式7-3 (近場): C<sub>n</sub> = G / (β + Q)<br>" +
                               "公式7-4 (遠場): C<sub>f</sub> = G / Q";
        
        const result = calculateSteadyStateConcentration(G, beta, Q);
        Cn = result.Cn;
        Cf = result.Cf;
        
        // 穩態濃度不隨時間變化
        for (let t = 1; t <= exposureTime; t++) {
          nearFieldConcentrations.push(Cn);
          farFieldConcentrations.push(Cf);
        }
      } 
      else if (calculationType === 'decay') {
        formulaDesc.innerHTML = "公式7-5 (近場): C<sub>n</sub>(t) = [β(C<sub>F0</sub>-C<sub>N0</sub>) - λ₂V<sub>N</sub>C<sub>N0</sub>]/[V<sub>N</sub>(λ₁-λ₂)] e<sup>λ₁(t-t₀)</sup> + [β(C<sub>N0</sub>-C<sub>F0</sub>) + λ₁V<sub>N</sub>C<sub>N0</sub>]/[V<sub>N</sub>(λ₁-λ₂)] e<sup>λ₂(t-t₀)</sup><br>" +
                               "公式7-6 (遠場): C<sub>f</sub>(t) = [(λ₁V<sub>N</sub>+β)(β(C<sub>F0</sub>-C<sub>N0</sub>)-λ₂V<sub>N</sub>C<sub>N0</sub>)]/[βV<sub>N</sub>(λ₁-λ₂)] e<sup>λ₁(t-t₀)</sup> + [(λ₂V<sub>N</sub>+β)(β(C<sub>N0</sub>-C<sub>F0</sub>)+λ₁V<sub>N</sub>C<sub>N0</sub>)]/[βV<sub>N</sub>(λ₁-λ₂)] e<sup>λ₂(t-t₀)</sup>";
        
        // 計算每分鐘濃度
        for (let t = 1; t <= exposureTime; t++) {
          if (t <= decayStartTime) {
            const result = calculateTimeConcentration(G, beta, Q, VN, VF, t, lambda1, lambda2);
            nearFieldConcentrations.push(result.Cn);
            farFieldConcentrations.push(result.Cf);
          } else {
            const result = calculateDecayConcentration(G, beta, Q, VN, VF, t, lambda1, lambda2, decayStartTime);
            nearFieldConcentrations.push(result.Cn);
            farFieldConcentrations.push(result.Cf);
          }
        }
        
        Cn = nearFieldConcentrations[exposureTime - 1];
        Cf = farFieldConcentrations[exposureTime - 1];
      }
      
      // 顯示濃度結果
      document.getElementById('nearFieldConc').textContent = Cn.toFixed(2);
      document.getElementById('farFieldConc').textContent = Cf.toFixed(2);
      
      // 轉換為ppm
      const Cn_ppm = mgm3_to_ppm(Cn, mw);
      const Cf_ppm = mgm3_to_ppm(Cf, mw);
      document.getElementById('nearFieldConcPPM').textContent = Cn_ppm.toFixed(2);
      document.getElementById('farFieldConcPPM').textContent = Cf_ppm.toFixed(2);
      
      // 計算TWA和STEL
      const { TWA: TWA_value, STEL: STEL_value } = calculateExposureMetrics(nearFieldConcentrations, exposureTime);
      
      // 轉換所有限值到mg/m³以便比較
      const TWA_limit_mgm3 = TWA_unit === 'ppm' ? ppm_to_mgm3(TWA_limit, mw) : TWA_limit;
      const STEL_limit_mgm3 = STEL_unit === 'ppm' ? ppm_to_mgm3(STEL_limit, mw) : STEL_limit;
      const IDLH_limit_mgm3 = IDLH_unit === 'ppm' ? ppm_to_mgm3(IDLH_limit, mw) : IDLH_limit;
      const OEL_limit_mgm3 = OEL_unit === 'ppm' ? ppm_to_mgm3(OEL_limit, mw) : OEL_limit;
      
      // 顯示暴露評估結果
      document.getElementById('TWA_value').textContent = TWA_value.toFixed(2);
      document.getElementById('TWA_limit').textContent = TWA_limit_mgm3.toFixed(2);
      document.getElementById('TWA_unit_display').textContent = 'mg/m³';
      document.getElementById('TWA_result').textContent = (TWA_value <= TWA_limit_mgm3) ? '符合' : '超標';
      
      document.getElementById('STEL_value').textContent = STEL_value.toFixed(2);
      document.getElementById('STEL_limit').textContent = STEL_limit_mgm3.toFixed(2);
      document.getElementById('STEL_unit_display').textContent = 'mg/m³';
      document.getElementById('STEL_result').textContent = (STEL_value <= STEL_limit_mgm3) ? '符合' : '超標';
      
      document.getElementById('IDLH_value').textContent = STEL_value.toFixed(2); // 使用STEL值作為IDLH比較
      document.getElementById('IDLH_limit').textContent = IDLH_limit_mgm3.toFixed(2);
      document.getElementById('IDLH_unit_display').textContent = 'mg/m³';
      document.getElementById('IDLH_result').textContent = (STEL_value <= IDLH_limit_mgm3) ? '符合' : '超標';
      
      document.getElementById('OEL_value').textContent = TWA_value.toFixed(2);
      document.getElementById('OEL_limit').textContent = OEL_limit_mgm3.toFixed(2);
      document.getElementById('OEL_unit_display').textContent = 'mg/m³';
      document.getElementById('OEL_result').textContent = (TWA_value <= OEL_limit_mgm3) ? '符合' : '超標';
      
      // 風險分級
      const shortTermRisk = document.getElementById('shortTermRisk');
      const longTermRisk = document.getElementById('longTermRisk');
      
      // 短期風險評估
      let shortTermLevel = 1;
      let shortTermDesc = '';
      let shortTermControl = '';
      
      if (STEL_value > IDLH_limit_mgm3) {
        shortTermLevel = 4;
        shortTermDesc = '超過IDLH，有立即生命健康危險';
        shortTermControl = '立即撤離，使用呼吸防護裝備，加強通風';
      } else if (STEL_value > STEL_limit_mgm3) {
        shortTermLevel = 4;
        shortTermDesc = '超過STEL，有健康危險';
        shortTermControl = '減少暴露時間，使用局部排氣，增加休息時間';
      } else if (STEL_value > STEL_limit_mgm3 * 0.5) {
        shortTermLevel = 3;
        shortTermDesc = '接近STEL限值';
        shortTermControl = '監測濃度，考慮工程控制措施';
      } else {
        shortTermLevel = 1;
        shortTermDesc = '低於STEL限值';
        shortTermControl = '維持現有控制措施，定期監測';
      }
      
      shortTermRisk.className = `risk-level-${shortTermLevel}`;
      shortTermRisk.cells[1].textContent = `等級 ${shortTermLevel}`;
      shortTermRisk.cells[2].textContent = shortTermDesc;
      shortTermRisk.cells[3].textContent = shortTermControl;
      
      // 長期風險評估
      let longTermLevel = 1;
      let longTermDesc = '';
      let longTermControl = '';
      
      if (TWA_value > OEL_limit_mgm3) {
        longTermLevel = 4;
        longTermDesc = '超過OEL限值';
        longTermControl = '需要立即採取控制措施：工程控制、行政管理、個人防護裝備';
      } else if (TWA_value > OEL_limit_mgm3 * 0.5) {
        longTermLevel = 3;
        longTermDesc = '超過1/2 OEL限值';
        longTermControl = '需要加強控制措施：考慮工程改善，加強監測';
      } else if (TWA_value > OEL_limit_mgm3 * 0.1) {
        longTermLevel = 2;
        longTermDesc = '超過1/10 OEL限值';
        longTermControl = '維持現有控制措施，定期監測';
      } else {
        longTermLevel = 1;
        longTermDesc = '低於1/10 OEL限值';
        longTermControl = '風險可接受，維持現有措施';
      }
      
      longTermRisk.className = `risk-level-${longTermLevel}`;
      longTermRisk.cells[1].textContent = `等級 ${longTermLevel}`;
      longTermRisk.cells[2].textContent = longTermDesc;
      longTermRisk.cells[3].textContent = longTermControl;
      
      // 繪製濃度趨勢圖
      drawConcentrationChart(nearFieldConcentrations, farFieldConcentrations, exposureTime, calculationType);
      
    } catch (error) {
      alert("計算錯誤: " + error.message);
    }
  }
  
  // 繪製濃度趨勢圖
  function drawConcentrationChart(nearFieldConcentrations, farFieldConcentrations, exposureTime, calculationType) {
    const timePoints = [];
    for (let t = 1; t <= exposureTime; t++) {
      timePoints.push(t);
    }
    
    const ctx = document.getElementById('concentrationChart').getContext('2d');
    
    // 銷毀現有圖表（如果存在）
    if (concentrationChart) {
      concentrationChart.destroy();
    }
    
    // 創建新圖表
    concentrationChart = new Chart(ctx, {
      type: 'line',
      data: {
        labels: timePoints,
        datasets: [
          {
            label: '近場濃度 (mg/m³)',
            data: nearFieldConcentrations,
            borderColor: 'rgb(255, 99, 132)',
            backgroundColor: 'rgba(255, 99, 132, 0.2)',
            tension: 0.1
          },
          {
            label: '遠場濃度 (mg/m³)',
            data: farFieldConcentrations,
            borderColor: 'rgb(54, 162, 235)',
            backgroundColor: 'rgba(54, 162, 235, 0.2)',
            tension: 0.1
          }
        ]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        scales: {
          x: {
            title: {
              display: true,
              text: '時間 (分鐘)'
            }
          },
          y: {
            title: {
              display: true,
              text: '濃度 (mg/m³)'
            },
            beginAtZero: true
          }
        }
      }
    });
  }
  
  // 初始化計算
  window.onload = function() {
    calculateVNandFSA();
    
    // 初始顯示暴露限值面板
    document.getElementsByClassName('collapsible')[0].click();
    
    // 初始計算
    calculate();
  };
</script>

</body>
</html>